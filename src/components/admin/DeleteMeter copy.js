import React, { useState } from 'react';
import styles from './DeleteMeter.module.css';

const DeleteMeter = ({ onBack, token, apiBaseUrl }) => {
    const [meterId, setMeterId] = useState('');
    const [foundMeter, setFoundMeter] = useState(null);
    const [message, setMessage] = useState('');
    const [error, setError] = useState('');
    const [isSearching, setIsSearching] = useState(false);
    const [isDeleting, setIsDeleting] = useState(false);

    const handleSearch = async (e) => {
        e.preventDefault();
        if (!meterId) {
            setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™ Meter ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
            return;
        }

        setIsSearching(true);
        setFoundMeter(null);
        setError('');
        setMessage('');

        try {
            const response = await fetch(`${apiBaseUrl}/wastewater-info/${meterId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                },
            });

            if (response.ok) {
                const data = await response.json();
                setFoundMeter(data);
                setMessage('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß');
            } else if (response.status === 404) {
                setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ID ‡∏ô‡∏µ‡πâ');
            } else {
                const errorData = await response.json();
                setError(errorData.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            }
        } catch (err) {
            setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
        } finally {
            setIsSearching(false);
        }
    };

    const handleDelete = async () => {
        const confirmDelete = window.confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ID: ${meterId} ?`);
        if (!confirmDelete) {
            return;
        }

        setIsDeleting(true);
        setError('');
        setMessage('');

        try {
            const response = await fetch(`${apiBaseUrl}/delete-meter/${meterId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                },
            });

            if (response.ok) {
                setMessage('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
                setMeterId('');
                setFoundMeter(null);
            } else {
                const errorData = await response.json();
                setError(errorData.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            }
        } catch (err) {
            setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
        } finally {
            setIsDeleting(false);
        }
    };

    return (
        <div className={styles.deleteMeterContainer}>
            <div className={styles.deleteMeterCard}>
                <h2 className={styles.cardTitle}>‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå</h2>
                <p className={styles.cardDescription}>‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™ Meter ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö</p>
                <form onSubmit={handleSearch} className={styles.form}>
                    <div className={styles.formGroup}>
                        <label htmlFor="meter-id">‡∏£‡∏´‡∏±‡∏™ Meter ID</label>
                        <input
                            id="meter-id"
                            type="text"
                            value={meterId}
                            onChange={(e) => setMeterId(e.target.value)}
                            className={styles.formInput}
                            placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: RJW-M01"
                            required
                        />
                    </div>
                    {error && <p className={styles.errorMessage}>{error}</p>}
                    {message && <p className={styles.successMessage}>{message}</p>}
                    <div className={styles.buttonContainer}>
                        <button type="submit" className={styles.searchButton} disabled={isSearching}>
                            {isSearching ? 'üëÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...' : 'üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                        </button>
                        <button type="button" className={styles.backButton} onClick={onBack}>
                            ‚Ü©Ô∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                        </button>
                    </div>
                </form>

                {foundMeter && (
                    <div className={styles.meterInfoContainer}>
                        <h3 className={styles.centerText}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
                        <p className={styles.meterInfoItem}><strong>‡∏£‡∏´‡∏±‡∏™ Meter ID:</strong> {foundMeter.meter_id}</p>
                        <p className={styles.meterInfoItem}><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå:</strong> {foundMeter.meter_name}</p>
                        <p className={styles.meterInfoItem}><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {foundMeter.type}</p>
                        <p className={styles.meterInfoItem}><strong>‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô:</strong> {foundMeter.factory}</p>
                        <p className={styles.meterInfoItem}><strong>‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£:</strong> {foundMeter.process}</p>
                        <p className={styles.meterInfoItem}><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (MAX CAP):</strong> {foundMeter.max_cap}</p>
                        <p className={styles.meterInfoItem}><strong>‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå (MAX METER):</strong> {foundMeter.max_meter}</p>
                        <p className={styles.meterInfoItem}><strong>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (PERIOD):</strong> {foundMeter.period}</p>
                        <button onClick={handleDelete} className={styles.deleteButton} disabled={isDeleting}>
                            {isDeleting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default DeleteMeter;
