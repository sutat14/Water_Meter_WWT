// src/components/common/Table.js

import React from 'react';
import styles from './Table.module.css';

const Table = ({ title, headers, columns, data, onRowClick, dynamicColumns }) => {

  // Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Alarm (dynamicColumns = true)
  if (dynamicColumns && columns) {
    const numColumns = columns.length;
    
    // ‚ú® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‚ú®
    // 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡πÄ‡∏ä‡πà‡∏ô 150px)
    const columnWidth = '150px'; 
    
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö gridTemplateColumns ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    //    (‡πÄ‡∏ä‡πà‡∏ô "150px 150px 150px 150px 150px 150px 150px")
    //    ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 150px ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const columnDefinitions = Array(numColumns).fill(columnWidth).join(' '); 

    const gridStyle = { 
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏´‡∏î‡∏ï‡∏±‡∏ß
      gridTemplateColumns: columnDefinitions 
    };
    // ‚ú® ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚ú®

    return (
      <div className={styles.tableWrapper}> 
        <h2 className={styles.tableTitle}>{title}</h2>
        
        {/* ‡πÉ‡∏ä‡πâ inline style ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏ó‡∏±‡∏ö CSS ‡πÄ‡∏î‡∏¥‡∏° */}
        <div className={styles.dataTable} style={gridStyle}>
          
          <div className={styles.tableHeader}>
            {columns.map((col) => (
              <div key={col.Header} className={styles.headerCell}>{col.Header}</div>
            ))}
          </div>
          
          {data.length === 0 ? (
            // .noDataCell ‡∏à‡∏≤‡∏Å CSS ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (grid-column: 1 / -1)
            <div className={styles.noDataCell}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
          ) : (
            <div className={styles.tableBody}>
              {data.map((row, rowIdx) => (
                <div key={rowIdx} className={styles.tableRow}>
                  {columns.map((col, cellIdx) => (
                    <div key={cellIdx} className={`${styles.tableCell} ${styles.leftAlign}`}>
                      {row[col.accessor] !== null && row[col.accessor] !== undefined ? String(row[col.accessor]) : 'N/A'}
                    </div>
                  ))}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  }
  
  // Logic ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ OverviewDashboard (‡∏à‡∏∞‡πÉ‡∏ä‡πâ CSS ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
  return (
    <div className={styles.tableWrapper}>
      <h2 className={styles.tableTitle}>{title}</h2>
      <div className={styles.dataTable}> {/* <-- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ inline style ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà */}
        <div className={styles.tableHeader}>
          {headers.map((header) => (
            <div key={header} className={styles.headerCell}>{header}</div>
          ))}
        </div>

        <div className={styles.tableBody}>
          {data.length === 0 ? (
            <div className={styles.noDataCell}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
          ) : (
            data.map((row, idx) => (
              <div
                key={idx}
                className={styles.tableRow}
                onClick={() => onRowClick?.(row["METER ID"])}
              >
                {/* Cell ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ñ‡∏π‡∏Å render ‡πÅ‡∏ö‡∏ö Hardcode ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° */}
                <div className={styles.tableCell}>{row["METER ID"]}</div>
                <div className={`${styles.tableCell} ${styles.leftAlign}`}>{row["METER NAME"]}</div>
                <div className={styles.tableCell}>{row["PROCESS"]}</div>
                <div className={styles.tableCell}>
                  {row["DATE TIME"] === 'No data' ? '‚ùì' : row["DATE TIME"]}
                </div>
                <div className={styles.tableCell}>
                  {row["Data METER"] === 'No data' ? '‚ùì' : row["Data METER"]}
                </div>
                <div className={`${styles.tableCell} ${row["STATUS"] === 'Exceeded' ? styles.exceededText : ''}`}>
                  {row["CONSUMPTION"] === 'No data' ? '‚ùì' : row["CONSUMPTION"]}
                </div>
                <div className={styles.tableCell}>
                  <div className={styles.statusCell}>
                    <span
                      className={`${styles.statusDot} ${
                        row["STATUS"] === "Exceeded"
                          ? styles.exceeded
                          : row["STATUS"] === "No data"
                          ? styles.noData
                          : styles.normal
                      }`}
                    ></span>
                    <span>{row["STATUS"]}</span>
                  </div>
                </div>
                <div className={styles.tableCell}>
                  {row["Record ID"] === 'No data' ? 'üßë‚Äçüîß' : row["Record ID"]}
                </div>
                <div className={styles.tableCell}>{row["MAX CAP"]}</div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default Table;